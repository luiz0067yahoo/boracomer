name: CreateContainerDockerAwsEC2

on:

  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

      - name: SSH connect
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.AWS_INSTANCE_IP }}
            username: ${{ secrets.AWS_INSTANCE_USER }}
            key: ${{ secrets.AWS_SSH_KEY_PEM }}
            port: ${{ secrets.AWS_INSTANCE_SSH_PORT }}
            script: | 
              sudo rm -rf /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}
              echo "remove folder"
              mkdir -p /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}
              echo "create folder"
              sudo chmod 7777 /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}
              echo "permission folder"
              cd /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}
              echo "access folder"
              sudo rm -rf /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}/Dockerfile
              echo "remove Dockerfile"
              #git config --global user.email "${GH_USERNAME}@users.noreply.github.com"
              #git config --global user.name "${GH_USERNAME}"

              #sudo wget https://raw.githubusercontent.com/${{ github.actor }}/${{ github.event.repository.name }}/main/Dockerfile /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}/Dockerfile
              sudo wget https://raw.githubusercontent.com/${{ github.actor }}/${{ github.event.repository.name }}/master/Dockerfile /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}/Dockerfile
              echo "download Dockerfile"
              cat /home/${{ secrets.AWS_INSTANCE_USER }}/${{ github.event.repository.name }}/Dockerfile

              
              #docker container stop container_${{ github.event.repository.name }} 
              #echo "stop container"
              #docker kill container_${{ github.event.repository.name }} 
              #echo "kill container"

              sudo docker build -t container_${{ github.event.repository.name }} .
              echo "build container"
              
              
              docker run -d --name container_${{ github.event.repository.name }} --rm -p ${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }} -ti ${{ github.event.repository.name }}
              #sudo docker run -d -p ${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }} ${{ github.event.repository.name }} 
              echo "run container"

              #sudo docker exec â€“it container_${{ github.event.repository.name }} /bin/bash
              #sudo  docker run -d -p 3000:3000 demo_cms_rails
              #docker run --name pandora_community --rm \
              #-p 8085:80 \
              #-p 41121:41121 \
              #-p 162:162 \
              #-e DBHOST=mysqlhost.local \
              #-e DBNAME=pandora \
              #-e DBUSER=pandora \
              #-e DBPASS=pandora \
              #-e DBPORT=3306 \
              #-e SLEEP=5 \
              #-e RETRIES=3 \
              #-e INSTANCE_NAME=pandora_community \
              #-ti rameijeiras/pandorafms-community:740
              #docker run -d --name container-name alpine watch "date >> /var/log/date.log"
